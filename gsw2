local barrelsFolder = workspace:WaitForChild("Barrels"):WaitForChild("Barrels")
local cratesFolder = workspace:WaitForChild("Barrels"):WaitForChild("Crates")
local kitchenFolder = workspace:WaitForChild("Island8"):WaitForChild("Kitchen")
local player = game:GetService("Players").LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local backpack = player:WaitForChild("Backpack")
local random = Random.new()
local runService = game:GetService("RunService")
local tweenService = game:GetService("TweenService")

-- Function to simulate smooth flying movement toward a target underground
local function flyToTarget(targetPosition)
    local undergroundOffset = Vector3.new(0, -10 - random:NextNumber(0, 5), 0) -- Random depth between -10 and -15 to vary
    local finalPosition = targetPosition + undergroundOffset + Vector3.new(random:NextNumber(-1, 1), 0, random:NextNumber(-1, 1)) -- Slight horizontal jitter
    local startPosition = humanoidRootPart.Position
    local distance = (finalPosition - startPosition).Magnitude
    local flightTime = distance / (humanoid.WalkSpeed * random:NextNumber(1.5, 2.5)) -- Simulate variable flight speed

    -- Temporarily increase fly speed and disable collision if needed (revert after)
    local originalWalkSpeed = humanoid.WalkSpeed
    local originalJumpPower = humanoid.JumpPower
    humanoid.WalkSpeed = random:NextNumber(50, 80) -- Faster for flying
    humanoid.JumpPower = 0 -- No jumping

    -- Use Tween for smooth movement
    local tweenInfo = TweenInfo.new(flightTime, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
    local tween = tweenService:Create(humanoidRootPart, tweenInfo, {CFrame = CFrame.new(finalPosition)})
    tween:Play()
    tween.Completed:Wait()

    -- Revert properties
    humanoid.WalkSpeed = originalWalkSpeed
    humanoid.JumpPower = originalJumpPower
end

-- Function to simulate a single click with human-like delay
local function simulateClick(target)
    if target and target:FindFirstChild("ClickDetector") then
        local originalMaxDistance = target.ClickDetector.MaxActivationDistance
        target.ClickDetector.MaxActivationDistance = math.max(originalMaxDistance, 20) -- Temporarily increase if needed for underground
        wait(random:NextNumber(0.2, 0.5)) -- Random delay before click
        local mouse = player:GetMouse()
        mouse.Button1Down:FireServer(target.ClickDetector)
        wait(random:NextNumber(0.1, 0.3)) -- Post-click delay
        fireclickdetector(target.ClickDetector) -- Fallback
        target.ClickDetector.MaxActivationDistance = originalMaxDistance -- Revert
    end
end

while true do
    local backpackCount = #backpack:GetChildren()
    local shouldProcessMixer = backpackCount > 15

    if shouldProcessMixer then
        for _, folder in pairs(kitchenFolder:GetChildren()) do
            if folder:FindFirstChild("JuicingBowl") then
                local mixer2 = folder.JuicingBowl:FindFirstChild("Mixer2")
                if mixer2 and mixer2:FindFirstChild("ClickDetector") then
                    local targetPosition = mixer2.Position + Vector3.new(random:NextNumber(-2, 2), 0, random:NextNumber(-2, 2))
                    flyToTarget(targetPosition)
                    wait(random:NextNumber(0.5, 1.5))
                    simulateClick(mixer2)
                    wait(random:NextNumber(1, 3)) -- Random pause to mimic human behavior
                end
            end
        end
    else
        -- Handle Barrels with continuous Backpack check
        for _, barrel in pairs(barrelsFolder:GetChildren()) do
            if barrel:FindFirstChild("ClickDetector") then
                local targetPosition = barrel.Position + Vector3.new(random:NextNumber(-2, 2), 0, random:NextNumber(-2, 2))
                flyToTarget(targetPosition)
                wait(random:NextNumber(0.1, 0.5))
                simulateClick(barrel)
                if #backpack:GetChildren() > 15 then break end -- Switch to Mixer2 if condition met
                wait(random:NextNumber(0.5, 1.5)) -- Random pause between actions
            end
        end
        
        -- Handle Crates with continuous Backpack check
        for _, crate in pairs(cratesFolder:GetChildren()) do
            if crate:FindFirstChild("ClickDetector") then
                local targetPosition = crate.Position + Vector3.new(random:NextNumber(-2, 2), 0, random:NextNumber(-2, 2))
                flyToTarget(targetPosition)
                wait(random:NextNumber(0.5, 1.5))
                simulateClick(crate)
                if #backpack:GetChildren() > 15 then break end -- Switch to Mixer2 if condition met
                wait(random:NextNumber(0.5, 1.5)) -- Random pause between actions
            end
        end
        
        -- Handle Mixer2 in Kitchen folders
        for _, folder in pairs(kitchenFolder:GetChildren()) do
            if folder:FindFirstChild("JuicingBowl") then
                local mixer2 = folder.JuicingBowl:FindFirstChild("Mixer2")
                if mixer2 and mixer2:FindFirstChild("ClickDetector") then
                    local targetPosition = mixer2.Position + Vector3.new(random:NextNumber(-2, 2), 0, random:NextNumber(-2, 2))
                    flyToTarget(targetPosition)
                    wait(random:NextNumber(0.5, 1.5))
                    simulateClick(mixer2)
                    wait(random:NextNumber(1, 3)) -- Random pause to mimic human behavior
                end
            end
        end
    end

    -- Random cycle delay to avoid predictable patterns
    wait(random:NextNumber(8, 12))
end
