getgenv().Config = {
    ["MaxTools"] = 20, -- Maximum tools before processing (used for UI color change only)
    ["FlySpeed"] = 300, -- Speed for flying to targets
    ["ClickDelayMin"] = 0.2, -- Minimum click delay
    ["ClickDelayMax"] = 0.5, -- Maximum click delay
    ["AntiAfkInterval"] = 0.5, -- Interval for anti-AFK movements
    ["LoopDelay"] = 10 -- Delay for main loop (optional, can be adjusted)
}

-- Wait for game to load and key components
repeat
    wait()
until game:IsLoaded()
repeat
    wait()
until game:GetService("Players").LocalPlayer and game:GetService("Players").LocalPlayer.PlayerGui and
      game:GetService("Players").LocalPlayer.Backpack and workspace

-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local TweenService = game:GetService("TweenService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")
local backpack = player:WaitForChild("Backpack")

-- Create UI for tool count
if not player.PlayerGui:FindFirstChild("ToolCounterGui") then
    local gui = Instance.new("ScreenGui")
    gui.Name = "ToolCounterGui"
    gui.ResetOnSpawn = false
    gui.Parent = player.PlayerGui

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(0, 200, 0, 50)
    label.Position = UDim2.new(0.5, -100, 0.05, 0)
    label.BackgroundTransparency = 1
    label.TextScaled = true
    label.Font = Enum.Font.GothamBold
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextStrokeTransparency = 0.5
    label.Text = "Tools: 0"
    label.Parent = gui
end

-- Update tool count UI
spawn(function()
    while true do
        local count = 0
        for _, item in pairs(backpack:GetChildren()) do
            if item:IsA("Tool") then
                count += 1
            end
        end
        local gui = player.PlayerGui:FindFirstChild("ToolCounterGui")
        if gui and gui:FindFirstChild("TextLabel") then
            gui.TextLabel.Text = "Tools: " .. count
            gui.TextLabel.TextColor3 = count > 70 and Color3.fromRGB(255, 100, 100) or Color3.new(1, 1, 1)
        end
        task.wait(0.5)
    end
end)

-- Function to check if player is alive
function isAlive()
    return player.Character and player.Character:FindFirstChild("Humanoid") and player.Character.Humanoid.Health > 0
end

-- Respawn if dead
function ensureAlive()
    if not isAlive() then
        pcall(function()
            ReplicatedStorage:WaitForChild("Connections"):WaitForChild("Spawn"):FireServer(1)
        end)
        player.CharacterAdded:Wait()
    end
end

-- Fly to target with tween
function flyToTarget(pos)
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        warn("Character or HumanoidRootPart not found!")
        return
    end
    local rootPart = character.HumanoidRootPart
    local humanoid = character.Humanoid

    humanoid.Jump = true
    task.wait(0.5)
    humanoid.Jump = false

    local originalSpeed = humanoid.WalkSpeed
    local originalJump = humanoid.JumpPower

    humanoid.WalkSpeed = 115
    humanoid.JumpPower = 0

    local distance = (pos - rootPart.Position).Magnitude
    local duration = distance / getgenv().Config["FlySpeed"]

    if TweenService and TweenService.Create then
        pcall(function()
            local tween = TweenService:Create(
                rootPart,
                TweenInfo.new(duration, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
                {CFrame = CFrame.new(pos)}
            )
            tween:Play()
            tween.Completed:Wait()
        end)
    end

    humanoid.WalkSpeed = originalSpeed
    humanoid.JumpPower = originalJump
end

-- Anti-AFK movement
function antiAfk()
    if character and character:FindFirstChild("Humanoid") then
        local humanoid = character.Humanoid
        humanoid.Jump = true
        task.wait(getgenv().Config["AntiAfkInterval"])
        humanoid.Jump = false
        humanoid:Move(Vector3.new(Random.new():NextNumber(-5, 5), 0, Random.new():NextNumber(-5, 5)), true)
        task.wait(getgenv().Config["AntiAfkInterval"])
    end
end

-- Find nearest object
function findNearest(list)
    local closest, minDist = nil, math.huge
    if character and character:FindFirstChild("HumanoidRootPart") then
        local rootPart = character.HumanoidRootPart
        for _, obj in pairs(list) do
            local dist = (obj.Position - rootPart.Position).Magnitude
            if dist < minDist then
                minDist = dist
                closest = obj
            end
        end
    end
    return closest
end

-- Continuous tool equipping and clicking loop
spawn(function()
    while true do
        ensureAlive()
        local player = game:GetService("Players").LocalPlayer
        local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
        local backpack = player:WaitForChild("Backpack")
        if humanoid and backpack then
            for _, tool in pairs(backpack:GetChildren()) do
                if tool:IsA("Tool") and (tool.Name:lower():find("juice") or tool.Name:lower():find("milk")) then
                    humanoid:EquipTool(tool)
                    task.wait(0.05) -- Minimal delay for equipping stability
                    -- Visual mouse click simulation
                    local virtualInput = game:GetService("VirtualInputManager")
                    if virtualInput and tool:FindFirstChild("ClickDetector") then
                        local pos = tool.Position
                        print("Equipping and clicking:", tool.Name, "at", pos)
                        pcall(function()
                            virtualInput:SendMouseButtonEvent(pos.X, pos.Y, 0, true, tool, 1)
                            task.wait(0.1)
                            virtualInput:SendMouseButtonEvent(pos.X, pos.Y, 0, false, tool, 1)
                        end)
                    end
                end
            end
        end
        task.wait(0.1) -- Short pause before rechecking backpack
    end
end)

-- Continuous visual mouse click simulation on targets
spawn(function()
    while true do
        ensureAlive()
        local barrels = workspace:FindFirstChild("Barrels")
        local island8 = workspace:FindFirstChild("Island8")
        if barrels and barrels:FindFirstChild("Barrels") and barrels:FindFirstChild("Crates") and island8 and island8:FindFirstChild("Kitchen") then
            local targets = {}
            for _, obj in pairs(barrels.Barrels:GetChildren()) do
                if obj:FindFirstChild("ClickDetector") then table.insert(targets, obj) end
            end
            for _, obj in pairs(barrels.Crates:GetChildren()) do
                if obj:FindFirstChild("ClickDetector") then table.insert(targets, obj) end
            end
            for _, folder in pairs(island8.Kitchen:GetChildren()) do
                local bowl = folder:FindFirstChild("JuicingBowl")
                if bowl then
                    local mixer = bowl:FindFirstChild("Mixer2")
                    if mixer and mixer:FindFirstChild("ClickDetector") then
                        table.insert(targets, mixer)
                    end
                end
            end

            if #targets > 0 then
                local target = findNearest(targets)
                if target and target:FindFirstChild("ClickDetector") then
                    local virtualInput = game:GetService("VirtualInputManager")
                    if virtualInput then
                        local pos = target.Position
                        print("Simulating click on target:", target.Name, "at", pos)
                        pcall(function()
                            virtualInput:SendMouseButtonEvent(pos.X, pos.Y, 0, true, target, 1)
                            task.wait(0.1)
                            virtualInput:SendMouseButtonEvent(pos.X, pos.Y, 0, false, target, 1)
                        end)
                        flyToTarget(pos + Vector3.new(Random.new():NextNumber(-2, 2), 5, Random.new():NextNumber(-2, 2)))
                        antiAfk()
                    end
                end
            end
        end
        task.wait(Random.new():NextNumber(getgenv().Config["ClickDelayMin"], getgenv().Config["ClickDelayMax"]))
    end
end)

-- Main loop (optional, can be kept for other logic if needed)
spawn(function()
    while true do
        ensureAlive()
        task.wait(getgenv().Config["LoopDelay"])
    end
end)
